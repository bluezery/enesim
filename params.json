{"name":"Enesim","tagline":"Drawing library","body":"### Introduction\r\nEnesim is a rendering library and provides a complete solution for drawing, allocating, compositing and converting pixels. All of the systems of the library are flexible enough to support drawing capabilities on any scenario.\r\n\r\nThe most useful system is the the Renderer system, which allows you to draw different graphics primitives (in Enesim it is called a Renderer) into a target drawable (in Enesim a Surface). Given that a Renderer can draw anything, it has its own state that is modified through the renderer's specific properties setters and getters. A simple example would be:\r\n\r\n```\r\nEnesim_Surface *s;\r\nEnesim_Renderer *r;\r\n\r\ns = enesim_surface_new(ENESIM_BACKEND_SOFTWARE, ENESIM_FORMAT_ARGB8888, 256, 256);\r\nr = enesim_renderer_rectangle_new();\r\nenesim_renderer_y_origin_set(r, 0);\r\nenesim_renderer_x_origin_set(r, 0);\r\nenesim_renderer_rectangle_width_set(r, 320);\r\nenesim_renderer_rectangle_height_set(r, 240);\r\nenesim_renderer_shape_stroke_weight_set(r, 1);\r\nenesim_renderer_shape_draw_mode_set(r, ENESIM_SHAPE_DRAW_MODE_STROKE);\r\nenesim_renderer_rop_set(r, ENESIM_BLEND);\r\nenesim_renderer_shape_outline_color_set(r, 0xff000000);\r\nenesim_renderer_surface_draw(r, s, NULL, 0, 0, NULL);\r\n```\r\n\r\n### Backends\r\n* Software based\r\n* OppenGL\r\n\r\n### Dependencies\r\n* Eina\r\n* Fontconfig\r\n* Freetype\r\n* GLew\r\n* libpng\r\n* libjpg","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}