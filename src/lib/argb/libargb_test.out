# 1 "libargb_test.c"
# 1 "<built-in>"
# 1 "<command line>"
# 1 "libargb_test.c"





# 1 "libargb.h" 1
# 21 "libargb.h"
# 1 "libargb_argb8888.h" 1
# 21 "libargb_argb8888.h"
# 1 "libargb_macros.h" 1
# 22 "libargb_argb8888.h" 2
# 1 "libargb_types.h" 1
# 23 "libargb_argb8888.h" 2

# 1 "libargb_argb8888_fill.h" 1
# 25 "libargb_argb8888_fill.h"
static inline unsigned char argb8888_alpha_get(uint32_t plane0)
{
 return (plane0 >> 24);
}

static inline unsigned char argb8888_red_get(unsigned int plane0)
{
 return ((plane0 >> 16) & 0xff);
}

static inline unsigned char argb8888_green_get(unsigned int plane0)
{
 return ((plane0 >> 8) & 0xff);
}

static inline unsigned char argb8888_blue_get(unsigned int plane0)
{
 return (plane0 & 0xff);
}

static inline void argb8888_from_components(unsigned int *plane0, unsigned char a, unsigned char r,
  unsigned char g, unsigned char b)
{
 *plane0 = (a << 24) | (r << 16) | (g << 8) | b;
}

static inline void argb8888_to_components(unsigned int plane0, unsigned char *a, unsigned char *r,
  unsigned char *g, unsigned char *b)
{
 if (a) *a = argb8888_alpha_get(plane0);
 if (r) *r = argb8888_red_get(plane0);
 if (g) *g = argb8888_green_get(plane0);
 if (b) *b = argb8888_blue_get(plane0);
}

static inline void argb8888_to_argb(unsigned int *argb, unsigned int plane0)
{
 *argb = plane0;
}
static inline void argb8888_from_argb(unsigned int argb, unsigned int *plane0)
{
 *plane0 = argb;
}

static inline void argb8888_fill(uint32_t *dplane0, uint32_t splane0)
{
 *dplane0 = splane0;
}
# 81 "libargb_argb8888_fill.h"
static inline uint32_t argb8888_interp_256(uint16_t a, uint32_t c0, uint32_t c1)
{
# 106 "libargb_argb8888_fill.h"
 return ( (((((((c0) >> 8) & 0xff00ff) - (((c1) >> 8) & 0xff00ff)) * (a))
   + ((c1) & 0xff00ff00)) & 0xff00ff00) +
   (((((((c0) & 0xff00ff) - ((c1) & 0xff00ff)) * (a)) >> 8)
   + ((c1) & 0xff00ff)) & 0xff00ff) );

}



static inline uint32_t argb8888_mul4_sym(uint32_t c1, uint32_t c2)
{
 return ( ((((((c1) >> 16) & 0xff00) * (((c2) >> 16) & 0xff00)) + 0xff0000) & 0xff000000) +
    ((((((c1) >> 8) & 0xff00) * (((c2) >> 16) & 0xff)) + 0xff00) & 0xff0000) +
    ((((((c1) & 0xff00) * ((c2) & 0xff00)) + 0xff00) >> 16) & 0xff00) +
    (((((c1) & 0xff) * ((c2) & 0xff)) + 0xff) >> 8) );
}




static inline uint32_t argb8888_mul_256(uint16_t a, uint32_t c)
{
 return ( (((((c) >> 8) & 0x00ff00ff) * (a)) & 0xff00ff00) +
 (((((c) & 0x00ff00ff) * (a)) >> 8) & 0x00ff00ff) );
}




static inline uint32_t argb8888_mul_sym(uint16_t a, uint32_t c)
{
 return ( (((((c) >> 8) & 0x00ff00ff) * (a) + 0xff00ff) & 0xff00ff00) +
    (((((c) & 0x00ff00ff) * (a) + 0xff00ff) >> 8) & 0x00ff00ff) );
}




static inline uint32_t argb8888_sample_good(uint32_t *data, int stride, int sw,
  int sh, Eina_F16p16 xx, Eina_F16p16 yy, int x, int y)
{
 if (x < sw && y < sh && x >= 0 && y >= 0)
 {
  uint32_t p0 = 0, p1 = 0, p2 = 0, p3 = 0;

  data = data + (stride * y) + x;

  if ((x > -1) && (y > - 1))
   p0 = *data;

  if ((y > -1) && ((x + 1) < sw))
   p1 = *(data + 1);

  if ((y + 1) < sh)
  {
   if (x > -1)
    p2 = *(data + stride);
   if ((x + 1) < sw)
    p3 = *(data + stride + 1);
  }

  if (p0 | p1 | p2 | p3)
  {
   uint16_t ax, ay;

   ax = 1 + ((xx & 0xffff) >> 8);
   ay = 1 + ((yy & 0xffff) >> 8);

   p0 = argb8888_interp_256(ax, p1, p0);
   p2 = argb8888_interp_256(ax, p3, p2);
   p0 = argb8888_interp_256(ay, p2, p0);
  }
  return p0;
 }
 else
  return 0;
}
# 25 "libargb_argb8888.h" 2
# 1 "libargb_argb8888_blend.h" 1
# 21 "libargb_argb8888_blend.h"
static inline void argb8888_blend(uint32_t *dplane0, uint16_t a, uint32_t splane0)
{
 *dplane0 = splane0 + argb8888_mul_256(a, *dplane0);
}
# 59 "libargb_argb8888_blend.h"
static void PT_C(argb8888, blend)(uint32_t *d,
  uint32_t s, uint32_t color, uint32_t m)
{
 uint16_t a16 = 256 - (color >> 24);
# 72 "libargb_argb8888_blend.h"
 argb8888_blend(d, a, color);

}

static void PT_MC(argb8888, argb8888, blend)(uint32_t *d,
  uint32_t s, uint32_t color, uint32_t m)
{
 uint16_t ca = 256 - (color >> 24);
 uint16_t ma = m >> 24;

 switch (ma)
 {
  case 0:
  break;

  case 255:
  argb8888_blend(d, ca, color);
  break;

  default:
  {
   uint32_t mc;

   mc = argb8888_mul_sym(ma, color);
   ma = 256 - (mc >> 24);
   argb8888_blend(d, ma, mc);
  }
  break;
 }
}

static void PT_P(argb8888, argb8888, blend)(uint32_t *d,
  uint32_t s, uint32_t color, uint32_t m)
{
 uint16_t a;

 a = 256 - (s >> 24);
 argb8888_blend(d, a, s);
}



static void SP_C(argb8888, blend)(uint32_t *d,
  unsigned int len, uint32_t *s,
  uint32_t color, uint32_t *m)
{
 uint32_t *end = d + len;
 uint16_t a16 = 256 - (color >> 24);




 while (d < end)
 {



  argb8888_blend(d, a16, color);

  d++;
 }



}
static void SP_P(argb8888, argb8888, blend)(uint32_t *d,
  unsigned int len, uint32_t *s,
  uint32_t color, uint32_t *m)
{
 uint32_t *end = d + len;




 while (d < end)
 {
  uint16_t a16 = 256 - ((*s) >> 24);






  argb8888_blend(d, a16, *s);

  d++;
  s++;
 }



}

static void SP_PC(argb8888, argb8888, blend)(uint32_t *d,
  unsigned int len, uint32_t *s,
  uint32_t color, uint32_t *m)
{
 uint32_t *end = d + len;




 while (d < end)
 {
  uint32_t cs = argb8888_mul4_sym(color, *s);
  uint16_t a16 = 256 - ((cs) >> 24);







  argb8888_blend(d, a16, cs);

  d++;
  s++;
 }



}


static void SP_MC(argb8888, argb8888, blend)(uint32_t *d, unsigned int len,
  uint32_t *s, uint32_t color,
  uint32_t *m)
{
 uint16_t ca = 256 - (color >> 24);
 uint32_t *end = d + len;
 while (d < end)
 {
  uint16_t ma = (*m) >> 24;

  switch (ma)
  {
   case 0:
   break;

   case 255:
   argb8888_blend(d, ca, color);
   break;

   default:
   {
    uint32_t mc;

    mc = argb8888_mul_sym(ma, color);
    ma = 256 - (mc >> 24);
    argb8888_blend(d, ma, mc);
   }
   break;
  }
  d++;
  m++;
 }
}

static void SP_MC(argb8888, a8, blend)(uint32_t *d, unsigned int len,
  uint32_t *s, uint32_t color,
  uint8_t *m)
{
 uint16_t ca = 256 - (color >> 24);
 uint32_t *end = d + len;
 while (d < end)
 {
  uint16_t ma = *m;

  switch (ma)
  {
   case 0:
   break;

   case 255:
   argb8888_blend(d, ca, color);
   break;

   default:
   {
    uint32_t mc;

    mc = argb8888_mul_sym(ma, color);
    ma = 256 - (mc >> 24);
    argb8888_blend(d, ma, mc);
   }
   break;
  }
  d++;
  m++;
 }
}

static void SP_PM(argb8888, argb8888, argb8888, blend)(uint32_t *d, unsigned int len,
  uint32_t *s, uint32_t color,
  uint32_t *m)
{
 uint32_t *end = d + len;

 while (d < end)
 {
  uint16_t ma = (*m) >> 24;

  switch (ma)
  {
   case 0:
   break;

   case 255:
   {
    uint16_t sa;

    sa = 256 - ((*s) >> 24);
    argb8888_blend(d, sa, *s);
   }
   break;

   default:
   {
    uint32_t mc;

    mc = argb8888_mul_sym(ma, *s);
    ma = 256 - (mc >> 24);
    argb8888_blend(d, ma, mc);
   }
   break;
  }
  m++;
  s++;
  d++;
 }
}
# 26 "libargb_argb8888.h" 2
# 22 "libargb.h" 2
# 7 "libargb_test.c" 2

int main(void)
{
 return 0;
}
